# -*- coding: utf-8 -*-
"""ml_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G4ChG0Xk4CONMfPlW-bU4sC4cP7h7t5s
"""

import pandas as pd

uri = "https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv"

dados = pd.read_csv(uri)

x = dados[["home", "how_it_works", "contact"]]
y = dados["bought"]

mapa = {
    "home": "principal",
    "how_it_works": "como_funciona",
    "contact": "contato",
    "bought": "comprou"
}
dados.rename(columns = mapa)

dados.shape

# separação dos elementos de treino e teste 
treino_x = x[:75]
treino_y = y[:75]

teste_x = x[75:]
teste_y = y[75:]

print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

# treinando e verificando a acurácia da previsão
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
acuracia = accuracy_score(teste_y, previsoes)

print("A acurácia foi %.2f%%" % acuracia)

# separando 25% dos elementos para teste usando "model selection"
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# define a ordem dos números aleatorios, para deixar de serem tão eleatorios
SEED = 20

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, 
                                                        random_state=SEED, 
                                                        test_size = 0.25,
                                                        stratify = y
                                                       )

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
acuracia = accuracy_score(teste_y, previsoes) * 100

print("A acurácia foi %.2f%%" % acuracia)

proporcao_treino_y = treino_y.value_counts()[0]/treino_y.value_counts()[1]
print("A proporção do treino y foi %.2f%%" % proporcao_treino_y)

proporcao_teste_y = teste_y.value_counts()[0]/teste_y.value_counts()[1]
print("A proporção do teste y foi %.2f%%" % proporcao_teste_y)