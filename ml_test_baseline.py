# -*- coding: utf-8 -*-
"""ml_test_baseline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PsbP26LglyoW2VBlZmQ4AgYxaDLUL-hh
"""

!pip install seaborn==0.9.0
import pandas as pd

uri = "https://gist.githubusercontent.com/guilhermesilveira/1b7d5475863c15f484ac495bd70975cf/raw/16aff7a0aee67e7c100a2a48b676a2d2d142f646/projects.csv"

dados = pd.read_csv(uri)

dados.head()

to_rename = {
    "unfinished" : "nao_finalizado",
    "expected_hours": "horas_estimadas",
    "price": "preco"
}

dados = dados.rename(columns = to_rename)

dados.head()

troca = {
    0 : 1,
    1 : 0
}

dados['finalizado'] = dados.nao_finalizado.map(troca)
dados.head()

dados.tail()

import seaborn as sns

sns.scatterplot(x = "horas_estimadas", y = "preco", data = dados, 
                hue = "finalizado")

sns.relplot(x = "horas_estimadas", y = "preco", data = dados, 
            hue = "finalizado",
            col = "finalizado"
           )

x = dados[['horas_estimadas', 'preco']]
y = dados['finalizado']

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# define a ordem dos números aleatorios, para deixar de serem tão eleatorios
# SEED = 20
SEED = 5
# np.random.seed(SEED)
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y,
                                                        random_state = SEED,
                                                        test_size = 0.25,
                                                        stratify = y
                                                       )

print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))


modelo = LinearSVC(random_state=SEED)
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
acuracia = accuracy_score(teste_y, previsoes) * 100

print("A acurácia foi %.2f%%" % acuracia)

proporcao_treino_y = treino_y.value_counts()[0]/treino_y.value_counts()[1]
print("A proporção do treino y foi %.2f%%" % proporcao_treino_y)

proporcao_teste_y = teste_y.value_counts()[0]/teste_y.value_counts()[1]
print("A proporção do teste y foi %.2f%%" % proporcao_teste_y)

import numpy as np
baseline = np.ones(540)

acuracia_baseline = accuracy_score(teste_y, baseline) * 100

print("A acurácia foi %.2f%%" % acuracia_baseline)

sns.scatterplot(x = "horas_estimadas", y = "preco", data = teste_x, 
                hue = teste_y)

x_min = teste_x.horas_estimadas.min()
x_max = teste_x.horas_estimadas.max()
y_min = teste_x.preco.min()
y_max = teste_x.preco.max()
print(x_min, x_max,y_min,y_max)

import matplotlib.pyplot as plt

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min)/ pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min)/ pixels)
xx, yy = np.meshgrid(eixo_x, eixo_y)
xx.ravel()

pontos = np.c_[xx.ravel(), yy.ravel()]
Z = modelo.predict(pontos)
Z = Z.reshape(xx.shape)
Z

plt.contourf(xx, yy, Z, alpha=0.3)
plt.scatter(teste_x.horas_estimadas, teste_x.preco, c=teste_y, s=1)